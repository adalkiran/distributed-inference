version: '3'
services:
  x-web:
    image: nginx
    volumes:
    - ./web/templates:/etc/nginx/templates
    ports:
    - "${WEB_HTTP_PORT}:80"
    environment:
    - NGINX_HOST=${WEB_DOMAIN}
    - NGINX_PORT=80
    networks:
      default:
        aliases:
        - web

  x-redis:
    image: distributed-inference/redis
    build:
      context: redis # Dockerfile location
      args:
        # See for available variants: https://hub.docker.com/_/redis?tab=tags
        - VARIANT:7.0.1-bullseye
    volumes:
      - "./redis/templates:/templates:cached"
      - "./data/redis/data:/data"
    environment:
    - REDIS_PORT
    - REDIS_PASSWORD
    networks:
      default:
        aliases:
        - redis

  x-ui:
    image: distributed-inference/ui
    build:
      context: ui # Dockerfile location
      args:
        # See for available variants: https://github.com/microsoft/vscode-dev-containers/tree/main/containers/typescript-node
        - VARIANT:18-bullseye
    environment:
      - WEB_HTTP_PORT
    volumes:
      # Mount the root folder that contains .git
      - "./ui:/workspace:cached"
    networks:
      default:
        aliases:
        - ui

  x-signaling:
    image: distributed-inference/signaling
    build:
      context: signaling # Dockerfile location
      args:
        # See for available variants: https://hub.docker.com/_/golang?tab=tags
        - VARIANT:1.18.3-bullseye
    # See: https://code.visualstudio.com/docs/remote/create-dev-container#_set-up-a-folder-to-run-in-a-container
    # [Optional] Required for ptrace-based debuggers like C++, Go, and Rust
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined
    volumes:
      # Mount the root folder that contains .git
      - "./signaling:/workspace:cached"
    environment:
    - REDIS_HOST
    - REDIS_PORT
    - REDIS_PASSWORD
    networks:
      default:
        aliases:
        - signaling

  x-mediabridge:
    image: distributed-inference/mediabridge
    build:
      context: mediabridge # Dockerfile location
      args:
        # See for available variants: https://hub.docker.com/_/golang?tab=tags
        - VARIANT:1.18.3-bullseye
    # See: https://code.visualstudio.com/docs/remote/create-dev-container#_set-up-a-folder-to-run-in-a-container
    # [Optional] Required for ptrace-based debuggers like C++, Go, and Rust
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined
    volumes:
      # Mount the root folder that contains .git
      - "./mediabridge:/workspace:cached"
    ports:
    - "${MEDIABRIDGE_UDP_PORT}:${MEDIABRIDGE_UDP_PORT}/udp"
    environment:
    - REDIS_HOST
    - REDIS_PORT
    - REDIS_PASSWORD
    - MEDIABRIDGE_DOCKER_HOST_IP
    - MEDIABRIDGE_UDP_PORT      

  x-inference:
    image: distributed-inference/inference
    build:
      context: inference # Dockerfile location
    volumes:
      - "./inference:/workspace:cached"
    environment:
    - PYTHONUNBUFFERED="1"
    - REDIS_HOST
    - REDIS_PORT
    - REDIS_PASSWORD

  x-gpu-inference:
    extends:
      service: x-inference
    image: distributed-inference/inference-gpu
    build:
      context: inference # Dockerfile location
      dockerfile: Dockerfile.cuda
      args:
      - CUDA_VERSION=${CUDA_VERSION:-11.4.2}
      - CUDNN_VERSION=${CUDNN_VERSION:-8}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [gpu]

  x-grafana:
    image: grafana/grafana
    user: "472"
    volumes:
    - ./data/grafana/data:/var/lib/grafana
    - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
    - GF_SECURITY_ADMIN_PASSWORD
    - "GF_SERVER_ROOT_URL=http://${WEB_DOMAIN}:${WEB_HTTP_PORT}/grafana"
    - GF_SERVER_SERVE_FROM_SUB_PATH=true
    networks:
      default:
        aliases:
        - grafana

  x-influxdb:
    image: influxdb:2.6.1
    volumes:
    - ./data/influxdbv2:/var/lib/influxdb2:rw
    environment:
    - DOCKER_INFLUXDB_INIT_MODE=setup
    - DOCKER_INFLUXDB_INIT_USERNAME
    - DOCKER_INFLUXDB_INIT_PASSWORD
    - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
    - DOCKER_INFLUXDB_INIT_ORG
    - DOCKER_INFLUXDB_INIT_BUCKET
    networks:
      default:
        aliases:
        - influxdb

  x-telegraf:
    image: telegraf:1.25
    user: telegraf:root
    volumes:
    - ./monitoring/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    # See: https://github.com/docker/for-mac/issues/4755
    - /var/run/docker.sock.raw:/var/run/docker.sock
    environment:
    - INFLUXDB_HOST
    - INFLUXDB_PORT
    - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
    - DOCKER_INFLUXDB_INIT_ORG
    - DOCKER_INFLUXDB_INIT_BUCKET
    - HOSTNAME_TAG
    networks:
      default:
        aliases:
        - telegraf

  # See: Agent mode: https://prometheus.io/blog/2021/11/16/agent/
  x-prometheus:
    image: prom/prometheus:latest
    user: nobody:root
    volumes:
    - ./monitoring/prometheus/config:/etc/prometheus
    - ./data/prometheus/data:/prometheus
    # See: https://github.com/docker/for-mac/issues/4755
    - /var/run/docker.sock.raw:/var/run/docker.sock
    environment:
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.agent.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--enable-feature=agent'
    networks:
      default:
        aliases:
        - prometheus


